{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"Mr.Fu","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"联合查询","slug":"联合查询","date":"2019-10-22T03:18:53.000Z","updated":"2019-10-22T03:19:09.250Z","comments":true,"path":"2019/10/22/联合查询/","link":"","permalink":"http://yoursite.com/2019/10/22/联合查询/","excerpt":"","text":"SELECT t1.id, t1. NAME, t2. NAMEFROM stu t1, tea t2WHERE t1.teaid = t2.idAND t1.id = 13; 内连接 SELECT t1.id, t1. NAME, t2. NAMEFROM stu t1 INNER JOIN tea t2ON t1.teaid = t2.idAND t1.id = 13; 左外链接SELECT t1.id, t1. NAME, t2. NAMEFROM stu t1 LEFT JOIN tea t2ON t1.teaid = t2.idAND t1.id = 13; 右外链接SELECT t1.id, t1. NAME, t2. NAMEFROM stu t1 right JOIN tea t2ON t1.teaid = t2.id; 全连接SELECT t1.id, t1.NAME, t2.NAMEFROM stu t1 FULL JOIN tea t2ON t1.teaid = t2.id; 交叉连接 SELECT t1.id, t1.NAME, t2.NAMEFROM stu t1 cross JOIN tea t2ON t1.teaid = t2.id;","categories":[],"tags":[]},{"title":"聚合函数","slug":"聚合函数","date":"2019-10-18T00:48:51.000Z","updated":"2019-10-18T00:50:54.336Z","comments":true,"path":"2019/10/18/聚合函数/","link":"","permalink":"http://yoursite.com/2019/10/18/聚合函数/","excerpt":"","text":"所有同学的年龄总和 SELECT SUM(age) from s_stu; 所有男生的平均年龄 SELECT AVG(age) from s_stu where sex = ‘男’; 所有女生中年龄最小的多大 SELECT MIN(age) from s_stu where sex = ‘女’; 所有女生中年龄最大的多大 SELECT max(age) from s_stu WHERE sex = ‘女’ 男生的数量 SELECT count(1) from s_stu WHERE sex = ‘男’; 查询男生和女生的总数 SELECT count(*),sex FROM s_stu group by sex; 查询每个年龄段的人数 SELECT count(1),age from s_stu group by age; 查询男生和女生中最小的年龄 SELECT min(age) from s_stu group by sex; 查询男生和女生的年龄大于15的人数，只保留人数大于3的； SELECT count(1), sex FROM s_stu WHERE age &gt; 15 GROUP BY sex HAVING count(1) &gt;= 3;","categories":[],"tags":[]},{"title":"查询","slug":"查询(2019-10-16)","date":"2019-10-16T08:32:30.000Z","updated":"2019-10-16T08:33:57.735Z","comments":true,"path":"2019/10/16/查询(2019-10-16)/","link":"","permalink":"http://yoursite.com/2019/10/16/查询(2019-10-16)/","excerpt":"","text":"1.查询所有人的所有信息 SELECT id,stuno,name,nation from stuinfo; SELECT * from stuinfo; 2.查询年龄大于1000的同学姓名和年龄； SELECT name 姓名,age 年龄,nation 民族 from stuinfo where age &gt; 1000; 3.查询年龄大于1000的同学姓名，并且把重复信息合并 SELECT DISTINCT name 姓名 from stuinfo where age &gt; 1000; 4.查询所有人的学号和姓名,只显示第50页的数据，每页5条 SELECT stuno,name from stuinfo LIMIT 0,5;5.查询所有学员信息，按照年龄升序排序 SELECT * from stuinfo order by age asc; 6.查询名字是两个字，按照年龄降序排列 SELECT * from stuinfo WHERE name LIKE ‘__’ order by age DESC; 7.按照民族进行排序 SELECT * from stuinfo order by nation DESC;","categories":[],"tags":[]},{"title":"","slug":"比较运算符","date":"2019-10-15T02:45:47.241Z","updated":"2019-10-15T03:09:17.557Z","comments":true,"path":"2019/10/15/比较运算符/","link":"","permalink":"http://yoursite.com/2019/10/15/比较运算符/","excerpt":"","text":"比较运算符(2019.10.15-02)： 运算符 含义 &gt; 大于 &gt;= 大于等于 &lt; 小于 &lt;= 小于等于 = 等于 !=或&lt;&gt; 不等于 IS NULL 是否为空 IS NOT NULL 是否不为空 IN 判断一个值是IN列表的任意一个值 NOT IN 判断一个值不是IN列表的任意一个值 LIKE 通配符匹配 BETWEEN AND 判断一个值是否在两个值之间 通配符： %：表示任意个或多个字符 _：表示任意单个字符。匹配单个任意字符，它常用来限制表达式的字符长度语句：（可以代表一个中文字符）","categories":[],"tags":[]},{"title":"","slug":"数据库语句（添加 删除 修改）","date":"2019-10-14T07:10:35.250Z","updated":"2019-10-15T03:02:54.486Z","comments":true,"path":"2019/10/14/数据库语句（添加 删除 修改）/","link":"","permalink":"http://yoursite.com/2019/10/14/数据库语句（添加 删除 修改）/","excerpt":"","text":"数据库语句(2019.10.14-03)： 1.insert into student(name,age,sex,stuno) values(‘赵飞强’,20,1,’11595’);– 添加 insert into 表名(内容1，内容2。。)values(内容1，内容2。。) 2.DELETE FROM student WHERE id=1; – 删除 DELETE FROM 表名 WHILE 删除位置 UPDATE student SET name = ‘张三’ WHERE id= 2 ;– 修改 UPDATE 表名 SET 字段名=字段内容 WHILE 修改位置","categories":[],"tags":[]}]}